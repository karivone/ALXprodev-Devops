#!/bin/bash

# List of Pokémon
POKEMON_LIST=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")

BASE_URL="https://pokeapi.co/api/v2/pokemon"
ERROR_LOG="errors.txt"
> "$ERROR_LOG"

# Timeout in seconds per request
TIMEOUT=10

# Function to fetch Pokémon data with retry logic
fetch_pokemon() {
  local name="$1"
  local output_file="${name}.json"
  local retries=0
  local success=0

  while [ $retries -lt 3 ]; do
    status_code=$(curl -s -w "%{http_code}" -o "$output_file" "$BASE_URL/$name")
    if [ "$status_code" -eq 200 ]; then
      echo "Fetched $name"
      success=1
      break
    else
      echo "Retry $((retries+1)) for $name failed (status: $status_code)"
      retries=$((retries + 1))
      sleep 2
    fi
  done

  if [ $success -eq 0 ]; then
    echo "[$(date)] Failed to fetch $name after 3 attempts. Status: $status_code" >> "$ERROR_LOG"
    rm -f "$output_file"
  fi
}

# Track background process PIDs
declare -a PIDS=()

for name in "${POKEMON_LIST[@]}"; do
  (
    fetch_pokemon "$name"
  ) &
  PIDS+=($!)
done

# Wait for processes with timeout
START_TIME=$(date +%s)

for pid in "${PIDS[@]}"; do
  while kill -0 "$pid" 2>/dev/null; do
    NOW=$(date +%s)
    ELAPSED=$((NOW - START_TIME))
    if [ "$ELAPSED" -gt "$TIMEOUT" ]; then
      echo "Process $pid taking too long. Killing..."
      kill "$pid" 2>/dev/null
      echo "[$(date)] Killed stuck process $pid after timeout." >> "$ERROR_LOG"
      break
    fi
    sleep 1
  done
done

echo "✅ All Pokémon fetch tasks attempted."
